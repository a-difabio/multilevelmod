% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/linear_reg_stan-glmer.R
\name{details_linear_reg_stan-glmer}
\alias{details_linear_reg_stan-glmer}
\title{Linear regression via hierarchical Bayesian methods}
\description{
The \code{stan-glmer} engine estimates hierarchical regression parameters using
Bayesian estimation.
}
\details{
For this engine, there is a single mode: regression
\subsection{Tuning Parameters}{

This model has no tuning parameters.
}

\subsection{Important engine-specific options}{

Some relevant arguments that can be passed to \code{set_engine()}:
\itemize{
\item \code{chains}: A positive integer specifying the number of Markov chains.
The default is 4.
\item \code{iter}: A positive integer specifying the number of iterations for
each chain (including warmup). The default is 2000.
\item \code{seed}: The seed for random number generation.
\item \code{cores}: Number of cores to use when executing the chains in
parallel.
\item \code{prior}: The prior distribution for the (non-hierarchical)
regression coefficients.
\item \code{prior_intercept}: The prior distribution for the intercept (after
centering all predictors).
}

See \code{?rstanarm::stan_glmer} and \code{?rstan::sampling} for more information.
}

\subsection{Translation from parsnip to the original package}{\if{html}{\out{<div class="sourceCode r">}}\preformatted{linear_reg() \%>\% 
  set_engine("stan-glmer") \%>\% 
  set_mode("regression") \%>\% 
  translate()
}\if{html}{\out{</div>}}\preformatted{## Linear Regression Model Specification (regression)
## 
## Computational engine: stan-glmer 
## 
## Model fit template:
## rstanarm::stan_glmer(formula = missing_arg(), data = missing_arg(), 
##     weights = missing_arg(), family = stats::gaussian, refresh = 0)
}
}

\subsection{Preprocessing requirements}{

There are no specific preprocessing needs. However, it is helpful to
keep the clustering/subject identifier column as factor or character
(instead of making them into dummy variables). See the examples in the
next section.
}

\subsection{Other details}{

The model can accept case weights.

With \code{parsnip}, we suggest using the formula method when fitting:\if{html}{\out{<div class="sourceCode r">}}\preformatted{library(tidymodels)
data("riesby")

linear_reg() \%>\% 
  set_engine("stan-glmer") \%>\% 
  fit(depr_score ~ week + (1|subject), data = riesby)
}\if{html}{\out{</div>}}

When using the general tidymodels infrastructure, it may be better to
use a workflow. In this case, you can add the appropriate columns using
\code{add_variables()} then supply the typical formula when adding the model:\if{html}{\out{<div class="sourceCode r">}}\preformatted{library(tidymodels)

glmer_spec <- 
  linear_reg() \%>\% 
  set_engine("stan-glmer")

glmer_wflow <- 
  workflow() \%>\% 
  # The data are included as-is using:
  add_variables(outcomes = depr_score, predictors = c(week, subject)) \%>\% 
  add_model(glmer_spec, formula = depr_score ~ week + (1|subject))

fit(glmer_wflow, data = riesby)
}\if{html}{\out{</div>}}

For prediction, the \code{stan-glmer} engine can compute posterior intervals
analogous to confidence and prediction intervals. In these instances,
the units are the original outcome and when \code{std_error = TRUE}, the
standard deviation of the posterior distribution (or posterior
predictive distribution as appropriate) is returned.
}

\subsection{References}{
\itemize{
\item McElreath, R. 2020 \emph{Statistical Rethinking}. CRC Press.
\item Sorensen, T, Vasishth, S. 2016. Bayesian linear mixed models using
Stan: A tutorial for psychologists, linguists, and cognitive
scientists, arXiv:1506.06201.
}
}
}
\keyword{internal}
